// *******NOTE******
// Do not move file - used on multiple sites, hotlinking to store. Talk to @andreasp
// *******NOTE******
(function() {
  "use strict";

  if (document.readyState === 'complete')
    initiateModule();
  else
    document.addEventListener("DOMContentLoaded", initiateModule)

  function initiateModule() {
    if (window.cdp)
      return false;

    window.cdp = (function () {
      const SERVICE_NAME = 'unityWeb',
          SCHEMA_VERSION = 'v1',
          BASE_HOST = location.host.split('.').slice(-2).join('.'), // Will be 'unity3d.com' or 'unity.com', care for co.uk
          LOAD_TIME = new Date().getTime();

      var api = loadAPI();

      // Send initial page view event
      sendPageView();

      // Exposed functions
      function sendPageView(cb) {
        var pageView = new PageViewEvent();

        getCommonHeader(function (common_header) {
          api.send_events_with_retry(common_header, [pageView]);
        })
      }

      function sendInteraction(category, action, label, value, cb) {
        var pageInteraction = new PageInteractionEvent(category, action, label, value, cb);

        getCommonHeader(function (common_header) {
          api.send_events_with_retry(common_header, [pageInteraction]);
        })
      }

      // Event objects
      function Event(type) {
        this.type = [SERVICE_NAME, type, SCHEMA_VERSION].join('.');
      }

      function PageViewEvent() {
        Event.call(this, 'pageView');
        this.msg = {
          ts: new Date().getTime(),
          referrer: document.referrer || null,
          lang: getLangCode(),
          // ga_blocked: !(window.ga && window.ga.toString().indexOf('Z.D.apply') > -1),
          // gtm_blocked: !window.google_tag_manager,
          utm_campaign: getCookie('utm_campaign'),
          utm_content: getCookie('utm_content'),
          utm_medium: getCookie('utm_medium'),
          utm_source: getCookie('utm_source'),
          utm_term: getCookie('utm_term')
        };
      }

      function PageInteractionEvent(category, action, label, value) {
        Event.call(this, 'pageInteraction');
        this.msg = {
          ts: new Date().getTime(),
          delta_ts: new Date().getTime() - LOAD_TIME,
          category: category,
          action: action,
          label: label,
          value: value
        }
      }

      function getCommonHeader(cb) {
        getUnityId(function (unity_id) {
          cb({
            uuid: getUUID(),
            user_id: unity_id,
            logged_in: isLoggedIn(),
            domain: location.host,
            path: getCanonicalPath(),
            path_raw: location.pathname,
            title: document.title,
            query: location.search.substr(1) || undefined,
            fragment: location.hash || undefined
          })
        });
      }

      // Data collector helpers
      function getUnityId(cb) {
        var unity_id_cname = 'unityId' + (isStg() ? '_stg' : ''),
            unity_id = getCookie(unity_id_cname);

        // Return cookie Unity id if exists, update to real one after
        if (unity_id)
          finish(unity_id);

        // Drupal 7
        if (window.UnityUser) {
          UnityUser.ready(function () {
            finish(UnityUser.unityId || undefined);
          })
        }
        // Drupal 8
        else if (window.CmsUser) {
          CmsUser.ready(function () {
            finish(CmsUser.unityId || undefined);
          })
        }
        // Forum
        else if (window.XenForo && XenForo.visitor && XenForo.visitor.unity_id)
          finish(XenForo.visitor.unity_id || undefined);
        // unity3d.com base domain, fetch from unity.com
        //else if (!unity_id && BASE_HOST === 'unity3d.com') {

        //}
        // If not ID to be found, finish as fallback
        else
          finish(undefined);

        function finish(unity_id) {
          if (unity_id)
            setCookie(unity_id_cname, unity_id, 1000 * 60 * 60 * 24 * 365, '/', BASE_HOST); // If defined, save Unity id for 1 year

          cb(unity_id);
          cb = function () {
          };
        }

      }

      function getUUID() {
        var uuid_cname = 'unityWebUUID' + (isStg() ? '_stg' : ''),
            uuid = getCookie(uuid_cname);

        // if (true) {
        //   if (BASE_HOST === 'unity.com' && !isStag()) {
        //
        //   } else {
        //
        //   }
        // }

        // Generate unique id if none exist, and then save to cookie
        if(!uuid) {
          uuid = Math.random().toString(36).substring(2) + (new Date()).getTime().toString(36);
          setCookie(uuid_cname, uuid, 1000 * 60 * 60 * 24 * 365, '/', BASE_HOST);
        }

        return uuid;
      }

      function getCorsIDs(cb) {

        window.addEventListener('message', receiveMessage);

        function receiveMessage(e) {
          if (e.origin !== opOrigin) {
            return;
          }



        }


        var cors_frame = document.createElement('iframe');
        cors_frame.style.display = 'none';
        cors_frame.src = 'https://store.unity.com/cors-frame.html';

        cors_frame.addEventListener('load', function() {
          console.log('cors_frame Loaded');

          cors_frame.contentWindow.postMessage('getIDs', 'https://store.unity.com')
        })

        document.body.appendChild(cors_frame);
      }

      function isLoggedIn() {
        if (
            // Drupal 7
        (document.body.classList.contains('logged-in')) ||
        // Drupal 8
        (window.drupalSettings && drupalSettings.user && drupalSettings.user.uid && drupalSettings.user.uid != 0) ||
        // Forum
        (window.XenForo && XenForo.visitor.unity_id != 0) ||
        // Answers
        (window.pageContext && pageContext.currentUser && pageContext.currentUser.id && pageContext.currentUser.id != '') ||
        // Issue Tracker / Feedback
        (location.host.match('(issuetracker|feedback)\.unity(3d)?\.com') && document.querySelectorAll('a[href="/users/sign_out"]').length)
        ) {
          return true;
        }

        return false;
      }

      function getLangCode() {
        var languages = getLanguages(),
            dir1 = location.pathname.split('/')[1],
            lang = 'en'; // English is the default language, if none is defined.

        if (languages.indexOf(dir1) > -1)
          lang = dir1;

        if(getCookie('AC_LANG')) // Connect lang
          lang = getCookie('AC_LANG');

        return lang;
      }

      function getCanonicalPath() {
        var languages = getLanguages(),
            path = location.pathname.split('/');

        // Remove langcode
        if (languages.indexOf(path[1]) > -1)
          path.splice(1, 1);

        // Add leading slash (If different lang than english and on frontpage)
        if (path.length === 1)
          path.push('');

        // Remove trailing slash;
        if (path.length > 2 && path.slice(-1)[0] == '')
          path.pop();

        return path.join('/');
      }

      function getLanguages() {
        return ['cn', 'de', 'es', 'ja', 'jp', 'ru', 'fr', 'kr', 'pt', 'en'];
      }

      function isStg() {
        var reg = /localhost|127\.0\.0\.1|(local|dev|next|test|int|staging|hq)\.unity(3d)?\.com/;
        return location.host.match(reg);
      }

      function setCookie(name, value, ms, path, domain) {
        if (!name || !value)
          return;

        var d,
            cpath = path ? '; path=' + path : '',
            cdomain = domain ? '; domain=' + domain : '',
            expires = '',
            secure = location.protocol == 'https:' ? '; secure' : '';

        if (ms) {
          d = new Date();
          d.setTime(d.getTime() + ms);
          expires = '; expires=' + d.toUTCString();
        }
        document.cookie = name + "=" + value + expires + cpath + cdomain + secure;
      }

      function getCookie(name) {
        var value = document.cookie.match('(^|;)\\s*' + name + '\\s*=\\s*([^;]+)');
        return value ? value.pop() : null;
      }

      // CDP API
      function loadAPI() {
        return {
          self: this,
          getEndpoint: function () {
            var endpoint = 'https://prd-lender.cdp.internal.unity3d.com/v1/events';

            // If domain is staging development, switch to stg endpoint.
            if (isStg())
              endpoint = 'https://stg-lender.cdp.internal.unity3d.com/v1/events';

            return endpoint;
          },

          send_events_with_retry: function (common, events, cb, max_retries) {
            max_retries = max_retries || 3;
            cb = cb || function() {};

            this.send_events(common, events, function (success) {
              if (success || max_retries - 1 === 0) {
                cb();
              } else {
                setTimeout(function () {
                  self.send_events_with_retry(common, events, cb, max_retries - 1)
                }, (4 - max_retries) * 3000)
              }
            })

          },

          send_events: function (common, events, cb) {
            var data = JSON.stringify({common: common}) + "\n";
            events.forEach(function (event) {
              data += JSON.stringify(event) + "\n";
            });

            var request = new XMLHttpRequest();
            request.open('POST', this.getEndpoint(), true);
            request.setRequestHeader('Content-Type', 'application/json');

            request.onreadystatechange = function () {
              if (request.readyState === 4)
                cb(request.status === 200)
            };

            request.send(data);
          }

        }
      }

      return {
        sendPageView: sendPageView,
        sendInteraction: sendInteraction
      }

    })();
  }
})()
